- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: Download Tower user data file
    get_url:
      url: https://raw.githubusercontent.com/RedHatNordicsSA/ansible-roadshow/master/content/scripts/tower-prep.sh
      dest: /tmp/tower-prep.sh
      validate_certs: no
      force: yes

  - name: Download regular hosts user data file
    get_url:
      url: https://raw.githubusercontent.com/RedHatNordicsSA/ansible-roadshow/master/content/scripts/host-prep.sh
      dest: /tmp/host-prep.sh
      validate_certs: no
      force: yes

  - name: Create empty file to store tower servers public IPs
    file:
      path: "./tower_servers.out"
      state: touch

  - name: Create empty file to store tower clients public IPs
    file:
      path: "./client_instances.out"
      state: touch

  - name: Ensure a security group for Ansible Tower servers is in place
    ec2_group:
      name: "{{ ec2_security_group_tower }}"
      description: Security Group for Ansible Tower servers
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Ensure a security group for client systems is in place
    ec2_group:
      name: "{{ ec2_security_group_client_systems }}"
      description: Security Group for Ansible client systems
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
#          group_name: "{{ ec2_security_group_tower}}"
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
#        - proto: icmp
#          from_port: -1
#          to_port: -1
#          group_name: "{{ ec2_security_group_tower}}"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Ensure a security group for Gitlab is in place
    ec2_group:
      name: "{{ ec2_security_group_gitlab }}"
      description: Security Group for webserver Servers
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision Gitlab
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group_gitlab }}"
      instance_type: t2.medium
      image: "{{ ami_id }}"
      wait: true
      exact_count: "{{ number_of_git_systems }}"
      count_tag:
        identity: git
      instance_tags:
        identity: git
    register: git_server

  - name: Provision the systems which are to be managed with Ansible
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group_client_systems }}"
      instance_type: t2.micro
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/host-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_client_systems }}"
      count_tag:
        identity: system
      instance_tags:
        identity: system
    register: ec2micro

  - name: Provision Ansible Tower
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group_tower }}"
      instance_type: t2.medium
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/tower-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_tower_systems }}"
      count_tag:
        identity: tower
      instance_tags:
        identity: tower
    register: ec2large

  - name: Add client instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2micro
    with_items: "{{ ec2micro.tagged_instances }}"

  - name: Print IP addresses of regular systems
    debug:
      msg: "{{ groups['ec2micro'] }}"

  - name: Print IP addresses of regular systems to ./client_instances.out
    lineinfile:
      path: ./client_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ ec2micro.tagged_instances }}"

  - name: Add Tower instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2large
    with_items: "{{ ec2large.tagged_instances }}"

  - name: Add git instance public IPs and fqdn to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groups: git
      ansible_become: true
      fqdn: "{{item.public_dns_name}}"
      ansible_ssh_user: ec2-user
    with_items: "{{ git_server.tagged_instances }}"

  - name: Print IP address of Ansible Tower server
    debug:
      msg: "{{ groups['ec2large'] }}"

  - name: Print IP addresses of Tower servers to ./tower_servers.out
    lineinfile:
      path: ./tower_servers.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ ec2large.tagged_instances }}"

  - name: Print public ip and fqdn of Git server
    debug:
      msg:
        - "{{ item.public_ip }}"
        - "{{ item.public_dns_name }}"
    with_items: "{{ git_server.tagged_instances }}"

  - name: Print IP addresses of Git servers to ./git_servers.out
    lineinfile:
      path: ./git_servers.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ git_server.tagged_instances }}"
